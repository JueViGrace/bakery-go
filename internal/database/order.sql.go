// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO bakery_order (
        id,
        total_amount,
        payment_method,
        status,
        user_id,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
`

type CreateOrderParams struct {
	ID            uuid.UUID
	TotalAmount   float32
	PaymentMethod string
	Status        string
	UserID        uuid.UUID
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.ID,
		arg.TotalAmount,
		arg.PaymentMethod,
		arg.Status,
		arg.UserID,
	)
	return err
}

const createOrderProducts = `-- name: CreateOrderProducts :exec
INSERT INTO bakery_order_products(
        order_id,
        product_id,
        price,
        quantity
    )
VALUES ($1, $2, $3, $4)
`

type CreateOrderProductsParams struct {
	OrderID   uuid.UUID
	ProductID uuid.UUID
	Price     float32
	Quantity  int32
}

func (q *Queries) CreateOrderProducts(ctx context.Context, arg CreateOrderProductsParams) error {
	_, err := q.db.ExecContext(ctx, createOrderProducts,
		arg.OrderID,
		arg.ProductID,
		arg.Price,
		arg.Quantity,
	)
	return err
}

const deleteOrder = `-- name: DeleteOrder :exec
UPDATE bakery_order
SET status = $1,
    deleted_at = NOW()
WHERE id = $2
`

type DeleteOrderParams struct {
	Status string
	ID     uuid.UUID
}

func (q *Queries) DeleteOrder(ctx context.Context, arg DeleteOrderParams) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, arg.Status, arg.ID)
	return err
}

const getOrderById = `-- name: GetOrderById :one
SELECT bakery_order.id, total_amount, payment_method, status, user_id, bakery_order.created_at, bakery_order.updated_at, bakery_order.deleted_at, order_id, product_id, bakery_order_products.price, quantity, bakery_product.id, bakery_product.price, name, description, category, stock, image, bakery_product.created_at, bakery_product.updated_at, bakery_product.deleted_at
FROM bakery_order
    LEFT JOIN bakery_order_products ON bakery_order.id = bakery_order_products.id
    LEFT JOIN bakery_product ON bakery_order_products.product_id = bakery_product.id
WHERE bakery_order.id = $1
    AND bakery_order.deleted_at IS NULL
`

type GetOrderByIdRow struct {
	ID            uuid.UUID
	TotalAmount   float32
	PaymentMethod string
	Status        string
	UserID        uuid.UUID
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
	DeletedAt     sql.NullTime
	OrderID       uuid.NullUUID
	ProductID     uuid.NullUUID
	Price         sql.NullFloat64
	Quantity      sql.NullInt32
	ID_2          uuid.NullUUID
	Price_2       sql.NullString
	Name          sql.NullString
	Description   sql.NullString
	Category      sql.NullString
	Stock         sql.NullInt32
	Image         sql.NullString
	CreatedAt_2   sql.NullTime
	UpdatedAt_2   sql.NullTime
	DeletedAt_2   sql.NullTime
}

func (q *Queries) GetOrderById(ctx context.Context, id uuid.UUID) (GetOrderByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i GetOrderByIdRow
	err := row.Scan(
		&i.ID,
		&i.TotalAmount,
		&i.PaymentMethod,
		&i.Status,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.OrderID,
		&i.ProductID,
		&i.Price,
		&i.Quantity,
		&i.ID_2,
		&i.Price_2,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Stock,
		&i.Image,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const getOrders = `-- name: GetOrders :many
SELECT bakery_order.id, total_amount, payment_method, status, user_id, bakery_order.created_at, bakery_order.updated_at, bakery_order.deleted_at, order_id, product_id, bakery_order_products.price, quantity, bakery_product.id, bakery_product.price, name, description, category, stock, image, bakery_product.created_at, bakery_product.updated_at, bakery_product.deleted_at
FROM bakery_order
    LEFT JOIN bakery_order_products ON bakery_order.id = bakery_order_products.id
    LEFT JOIN bakery_product ON bakery_order_products.product_id = bakery_product.id
WHERE bakery_order.deleted_at IS NULL
`

type GetOrdersRow struct {
	ID            uuid.UUID
	TotalAmount   float32
	PaymentMethod string
	Status        string
	UserID        uuid.UUID
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
	DeletedAt     sql.NullTime
	OrderID       uuid.NullUUID
	ProductID     uuid.NullUUID
	Price         sql.NullFloat64
	Quantity      sql.NullInt32
	ID_2          uuid.NullUUID
	Price_2       sql.NullString
	Name          sql.NullString
	Description   sql.NullString
	Category      sql.NullString
	Stock         sql.NullInt32
	Image         sql.NullString
	CreatedAt_2   sql.NullTime
	UpdatedAt_2   sql.NullTime
	DeletedAt_2   sql.NullTime
}

func (q *Queries) GetOrders(ctx context.Context) ([]GetOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersRow
	for rows.Next() {
		var i GetOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.TotalAmount,
			&i.PaymentMethod,
			&i.Status,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.OrderID,
			&i.ProductID,
			&i.Price,
			&i.Quantity,
			&i.ID_2,
			&i.Price_2,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Stock,
			&i.Image,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByUser = `-- name: GetOrdersByUser :many
SELECT bakery_order.id, total_amount, payment_method, status, user_id, bakery_order.created_at, bakery_order.updated_at, bakery_order.deleted_at, order_id, product_id, bakery_order_products.price, quantity, bakery_product.id, bakery_product.price, name, description, category, stock, image, bakery_product.created_at, bakery_product.updated_at, bakery_product.deleted_at
FROM bakery_order
    LEFT JOIN bakery_order_products ON bakery_order.id = bakery_order_products.id
    LEFT JOIN bakery_product ON bakery_order_products.product_id = bakery_product.id
WHERE bakery_order.user_id = $1
    AND bakery_order.deleted_at IS NULL
`

type GetOrdersByUserRow struct {
	ID            uuid.UUID
	TotalAmount   float32
	PaymentMethod string
	Status        string
	UserID        uuid.UUID
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
	DeletedAt     sql.NullTime
	OrderID       uuid.NullUUID
	ProductID     uuid.NullUUID
	Price         sql.NullFloat64
	Quantity      sql.NullInt32
	ID_2          uuid.NullUUID
	Price_2       sql.NullString
	Name          sql.NullString
	Description   sql.NullString
	Category      sql.NullString
	Stock         sql.NullInt32
	Image         sql.NullString
	CreatedAt_2   sql.NullTime
	UpdatedAt_2   sql.NullTime
	DeletedAt_2   sql.NullTime
}

func (q *Queries) GetOrdersByUser(ctx context.Context, userID uuid.UUID) ([]GetOrdersByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersByUserRow
	for rows.Next() {
		var i GetOrdersByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.TotalAmount,
			&i.PaymentMethod,
			&i.Status,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.OrderID,
			&i.ProductID,
			&i.Price,
			&i.Quantity,
			&i.ID_2,
			&i.Price_2,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Stock,
			&i.Image,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE bakery_order
SET status = $1,
    updated_at = NOW()
WHERE id = $2
`

type UpdateOrderStatusParams struct {
	Status string
	ID     uuid.UUID
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	return err
}
