// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO bakery_user (
        id,
        first_name,
        last_name,
        email,
        password,
        birth_date,
        phone,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
RETURNING id, first_name, last_name, email, password, birth_date, phone, role, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	ID        uuid.UUID
	FirstName string
	LastName  string
	Email     string
	Password  string
	BirthDate time.Time
	Phone     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (BakeryUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.BirthDate,
		arg.Phone,
	)
	var i BakeryUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.BirthDate,
		&i.Phone,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE bakery_user
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, email, password, birth_date, phone, role, created_at, updated_at, deleted_at
FROM bakery_user
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (BakeryUser, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i BakeryUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.BirthDate,
		&i.Phone,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, first_name, last_name, email, password, birth_date, phone, role, created_at, updated_at, deleted_at
FROM bakery_user
`

func (q *Queries) GetUsers(ctx context.Context) ([]BakeryUser, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BakeryUser
	for rows.Next() {
		var i BakeryUser
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.BirthDate,
			&i.Phone,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE bakery_user
SET first_name = $1,
    last_name = $2,
    birth_date = $3,
    phone = $4,
    updated_at = NOW()
WHERE id = $5
RETURNING id, first_name, last_name, email, password, birth_date, phone, role, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	FirstName string
	LastName  string
	BirthDate time.Time
	Phone     string
	ID        uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (BakeryUser, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.BirthDate,
		arg.Phone,
		arg.ID,
	)
	var i BakeryUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.BirthDate,
		&i.Phone,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
