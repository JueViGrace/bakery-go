// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO bakery_product (
        id,
        price,
        name,
        description,
        category,
        stock,
        image,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
RETURNING id, price, name, description, category, stock, image, created_at, updated_at, deleted_at
`

type CreateProductParams struct {
	ID          uuid.UUID
	Price       string
	Name        string
	Description string
	Category    string
	Stock       int32
	Image       string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (BakeryProduct, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.Price,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Stock,
		arg.Image,
	)
	var i BakeryProduct
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Stock,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE bakery_product
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProductById = `-- name: GetProductById :one
SELECT id, price, name, description, category, stock, image, created_at, updated_at, deleted_at
FROM bakery_product
WHERE bakery_product.id = $1 AND
bakery_product.deleted_at IS NULL
`

func (q *Queries) GetProductById(ctx context.Context, id uuid.UUID) (BakeryProduct, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i BakeryProduct
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Stock,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, price, name, description, category, stock, image, created_at, updated_at, deleted_at
FROM bakery_product
WHERE bakery_product.deleted_at IS NULL
`

func (q *Queries) GetProducts(ctx context.Context) ([]BakeryProduct, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BakeryProduct
	for rows.Next() {
		var i BakeryProduct
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Stock,
			&i.Image,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE bakery_product
SET price = $1,
    name = $2,
    description = $3,
    category = $4,
    stock = $5,
    image = $6,
    updated_at = NOW()
WHERE id = $7
RETURNING id, price, name, description, category, stock, image, created_at, updated_at, deleted_at
`

type UpdateProductParams struct {
	Price       string
	Name        string
	Description string
	Category    string
	Stock       int32
	Image       string
	ID          uuid.UUID
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (BakeryProduct, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Price,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Stock,
		arg.Image,
		arg.ID,
	)
	var i BakeryProduct
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Stock,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
